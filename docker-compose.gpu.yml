version: '3.8'

services:
  # Servidor Qdrant - Banco de dados vetorial
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-server
    restart: unless-stopped
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - ./qdrant_storage:/qdrant/storage:z
    environment:
      QDRANT__SERVICE__HTTP_PORT: "6333"
      QDRANT__SERVICE__GRPC_PORT: "6334"
      QDRANT__LOG_LEVEL: "INFO"
      QDRANT__STORAGE__STORAGE_PATH: "/qdrant/storage"
      QDRANT__STORAGE__WAL__WAL_CAPACITY_MB: "512"
    networks:
      - qdrant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Aplicação Hybrid Search com GPU Support
  app:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    image: qdrant-hybrid-search:latest
    container_name: qdrant-hybrid-search
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models:rw
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      # Para desenvolvimento (opcional)
      # - ./app:/app/app:ro
    environment:
      # Configuração da API
      API_HOST: "0.0.0.0"
      API_PORT: "8000"
      API_KEY: "${API_KEY:-}"
      
      # Configuração do Qdrant
      QDRANT_HOST: "qdrant"
      QDRANT_PORT: "6333"
      QDRANT_COLLECTION: "hybrid_search"
      
      # Configuração de Modelos
      DENSE_MODEL: "intfloat/multilingual-e5-large"
      SPARSE_MODEL: "prithivida/Splade_PP_en_v1"
      
      # Configuração GPU
      USE_GPU: "${USE_GPU:-true}"
      CUDA_VISIBLE_DEVICES: "${CUDA_VISIBLE_DEVICES:-0}"
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
      
      # Performance
      BATCH_SIZE: "${BATCH_SIZE:-32}"
      MAX_SEQUENCE_LENGTH: "512"
      NUM_WORKERS: "4"
      CACHE_EMBEDDINGS: "true"
      EMBEDDING_CACHE_SIZE: "10000"
      
      # Outros
      N8N_WEBHOOK_ENABLED: "true"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
      CORS_ENABLED: "true"
      CORS_ORIGINS: '["*"]'
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - qdrant-network
    # Configuração para GPU - IMPORTANTE!
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all  # ou "1" para usar apenas 1 GPU
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 300s  # 5 min para download dos modelos

# Networks
networks:
  qdrant-network:
    driver: bridge
    name: qdrant-network

# Volumes persistentes
volumes:
  qdrant_storage:
    driver: local
  models:
    driver: local
  data:
    driver: local
  logs:
    driver: local