# DOCKERFILE PARA EASYPANEL COM GPU - RTX 4000
# Vers√£o corrigida e atualizada

# Usar imagem CUDA mais recente (n√£o deprecated)
FROM nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04

# Configura√ß√µes essenciais
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    HF_HOME=/app/models \
    TRANSFORMERS_CACHE=/app/models \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    CUDA_VISIBLE_DEVICES=0 \
    PATH="/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Instalar Python e depend√™ncias do sistema
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    python3-pip \
    curl \
    wget \
    git \
    gcc \
    g++ \
    build-essential \
    && rm -rf /var/lib/apt/lists/* \
    && ln -sf /usr/bin/python3.11 /usr/bin/python \
    && ln -sf /usr/bin/python3.11 /usr/bin/python3

# Atualizar pip
RUN python -m pip install --upgrade pip setuptools wheel

WORKDIR /app

# Instalar PyTorch com CUDA 12.1 (vers√£o mais recente compat√≠vel)
RUN pip install --no-cache-dir \
    torch==2.2.0 \
    torchvision==0.17.0 \
    torchaudio==2.2.0 \
    --index-url https://download.pytorch.org/whl/cu121

# Instalar depend√™ncias principais
RUN pip install --no-cache-dir \
    transformers==4.36.2 \
    sentence-transformers==2.2.2 \
    qdrant-client==1.7.0 \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    pydantic==2.5.0 \
    pydantic-settings==2.1.0 \
    numpy==1.24.3 \
    accelerate==0.25.0 \
    structlog==23.2.0 \
    python-multipart \
    python-dotenv

# Copiar requirements.txt primeiro (se existir)
COPY requirements.txt* ./
RUN if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi

# Copiar aplica√ß√£o
COPY app/ /app/app/

# Criar diret√≥rios necess√°rios
RUN mkdir -p /app/models /app/data /app/logs

# Script de verifica√ß√£o de GPU
RUN echo '#!/bin/bash' > /app/check_gpu.py && \
    echo 'import torch' >> /app/check_gpu.py && \
    echo 'print("üîç Verificando GPU...")' >> /app/check_gpu.py && \
    echo 'print(f"CUDA dispon√≠vel: {torch.cuda.is_available()}")' >> /app/check_gpu.py && \
    echo 'if torch.cuda.is_available():' >> /app/check_gpu.py && \
    echo '    print(f"GPU detectada: {torch.cuda.get_device_name(0)}")' >> /app/check_gpu.py && \
    echo '    print(f"N√∫mero de GPUs: {torch.cuda.device_count()}")' >> /app/check_gpu.py && \
    echo '    print(f"CUDA Version: {torch.version.cuda}")' >> /app/check_gpu.py && \
    echo 'else:' >> /app/check_gpu.py && \
    echo '    print("‚ö†Ô∏è GPU n√£o detectada - rodando em CPU")' >> /app/check_gpu.py && \
    chmod +x /app/check_gpu.py

# Script de inicializa√ß√£o melhorado
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

echo "========================================="
echo "üöÄ Iniciando aplica√ß√£o com suporte GPU"
echo "========================================="

# Verificar nvidia-smi (pode n√£o estar dispon√≠vel em runtime containers)
if command -v nvidia-smi &> /dev/null; then
    echo "üìä Informa√ß√µes da GPU (nvidia-smi):"
    nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader || true
else
    echo "‚ÑπÔ∏è nvidia-smi n√£o dispon√≠vel (normal em runtime containers)"
fi

# Verificar GPU via PyTorch
echo ""
echo "üîß Verificando GPU via PyTorch:"
python /app/check_gpu.py

echo ""
echo "========================================="
echo "üì° Iniciando servidor FastAPI..."
echo "========================================="

# Verificar se o m√≥dulo uvicorn est√° instalado
python -c "import uvicorn" 2>/dev/null || {
    echo "‚ùå Erro: uvicorn n√£o encontrado. Instalando..."
    pip install uvicorn[standard]
}

# Iniciar aplica√ß√£o
exec python -m uvicorn app.main:app \
    --host 0.0.0.0 \
    --port 8000 \
    --reload \
    --log-level info
EOF

RUN chmod +x /app/start.sh

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expor porta
EXPOSE 8000

# Comando de inicializa√ß√£o
CMD ["/bin/bash", "/app/start.sh"]
