services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-db
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-storage:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
    networks:
      - qdrant-network

  # Hybrid Search API - Using pre-built image from GitHub Container Registry
  hybrid-search-api:
    image: ghcr.io/work-flow-manager/qdrant-hybridsearch:latest
    container_name: hybrid-search-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - models-cache:/app/models
      - app-data:/app/data
    environment:
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_KEY=${API_KEY:-your-secure-api-key-here}
      
      # Qdrant Configuration
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION=hybrid_search
      
      # Model Configuration
      - DENSE_MODEL=intfloat/multilingual-e5-large
      - SPARSE_MODEL=prithivida/Splade_PP_en_v1
      
      # GPU Settings (set USE_GPU=true if you have NVIDIA GPU)
      - USE_GPU=${USE_GPU:-false}
      - CUDA_DEVICE=0
      - BATCH_SIZE=${BATCH_SIZE:-32}
      - MAX_SEQUENCE_LENGTH=512
      
      # Performance Settings
      - NUM_WORKERS=4
      - CACHE_EMBEDDINGS=true
      - EMBEDDING_CACHE_SIZE=10000
      
      # n8n Integration
      - N8N_WEBHOOK_ENABLED=true
      - N8N_WEBHOOK_TIMEOUT=30
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      
      # CORS
      - CORS_ENABLED=true
      - CORS_ORIGINS=["*"]
      
    depends_on:
      - qdrant
    networks:
      - qdrant-network
    # Uncomment below if you have NVIDIA GPU with docker runtime
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    # runtime: nvidia

networks:
  qdrant-network:
    driver: bridge

volumes:
  qdrant-storage:
    driver: local
  models-cache:
    driver: local
  app-data:
    driver: local